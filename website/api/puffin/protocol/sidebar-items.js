window.SIDEBAR_ITEMS = {"trait":[["ExtractKnowledge","Provide a way to extract knowledge out of a Message/OpaqueMessage or any type that might be used in a precomputation"],["OpaqueProtocolMessage","A non-structured version of [`ProtocolMessage`]. This can be used for example for encrypted messages which do not have a structure."],["OpaqueProtocolMessageFlight","Store a flight of opaque messages, a vec of all the messages sent by the PUT between two steps"],["ProtocolBehavior","Defines the protocol which is being tested. The fuzzer is generally abstract over the used protocol. We assume that protocols have opaque messages, structured messages, and a way to deframe an arbitrary stream of bytes into messages."],["ProtocolMessage","A structured message. This type defines how all possible messages of a protocol. Usually this is implemented using an `enum`."],["ProtocolMessageDeframer","Deframes a stream of bytes into distinct OpaqueProtocolMessages. A deframer is usually state-ful. This means it produces as many messages from the input bytes and stores them."],["ProtocolMessageFlight","Store a message flight, a vec of all the messages sent by the PUT between two steps"]]};