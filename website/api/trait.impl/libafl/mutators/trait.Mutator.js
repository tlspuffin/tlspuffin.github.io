(function() {
    var implementors = Object.fromEntries([["puffin",[["impl&lt;I, MT, S&gt; Mutator&lt;I, S&gt; for <a class=\"struct\" href=\"puffin/fuzzer/stages/struct.PuffinScheduledMutator.html\" title=\"struct puffin::fuzzer::stages::PuffinScheduledMutator\">PuffinScheduledMutator</a>&lt;I, MT, S&gt;<div class=\"where\">where\n    I: Input,\n    MT: MutatorsTuple&lt;I, S&gt;,\n    S: HasRand,</div>"],["impl&lt;S, PT: <a class=\"trait\" href=\"puffin/protocol/trait.ProtocolTypes.html\" title=\"trait puffin::protocol::ProtocolTypes\">ProtocolTypes</a>&gt; Mutator&lt;<a class=\"struct\" href=\"puffin/trace/struct.Trace.html\" title=\"struct puffin::trace::Trace\">Trace</a>&lt;PT&gt;, S&gt; for <a class=\"struct\" href=\"puffin/fuzzer/mutations/struct.GenerateMutator.html\" title=\"struct puffin::fuzzer::mutations::GenerateMutator\">GenerateMutator</a>&lt;S, PT&gt;<div class=\"where\">where\n    S: HasRand,</div>"],["impl&lt;S, PT: <a class=\"trait\" href=\"puffin/protocol/trait.ProtocolTypes.html\" title=\"trait puffin::protocol::ProtocolTypes\">ProtocolTypes</a>&gt; Mutator&lt;<a class=\"struct\" href=\"puffin/trace/struct.Trace.html\" title=\"struct puffin::trace::Trace\">Trace</a>&lt;PT&gt;, S&gt; for <a class=\"struct\" href=\"puffin/fuzzer/mutations/struct.RemoveAndLiftMutator.html\" title=\"struct puffin::fuzzer::mutations::RemoveAndLiftMutator\">RemoveAndLiftMutator</a>&lt;S&gt;<div class=\"where\">where\n    S: HasRand,</div>"],["impl&lt;S, PT: <a class=\"trait\" href=\"puffin/protocol/trait.ProtocolTypes.html\" title=\"trait puffin::protocol::ProtocolTypes\">ProtocolTypes</a>&gt; Mutator&lt;<a class=\"struct\" href=\"puffin/trace/struct.Trace.html\" title=\"struct puffin::trace::Trace\">Trace</a>&lt;PT&gt;, S&gt; for <a class=\"struct\" href=\"puffin/fuzzer/mutations/struct.RepeatMutator.html\" title=\"struct puffin::fuzzer::mutations::RepeatMutator\">RepeatMutator</a>&lt;S&gt;<div class=\"where\">where\n    S: HasRand,</div>"],["impl&lt;S, PT: <a class=\"trait\" href=\"puffin/protocol/trait.ProtocolTypes.html\" title=\"trait puffin::protocol::ProtocolTypes\">ProtocolTypes</a>&gt; Mutator&lt;<a class=\"struct\" href=\"puffin/trace/struct.Trace.html\" title=\"struct puffin::trace::Trace\">Trace</a>&lt;PT&gt;, S&gt; for <a class=\"struct\" href=\"puffin/fuzzer/mutations/struct.ReplaceMatchMutator.html\" title=\"struct puffin::fuzzer::mutations::ReplaceMatchMutator\">ReplaceMatchMutator</a>&lt;S, PT&gt;<div class=\"where\">where\n    S: HasRand,</div>"],["impl&lt;S, PT: <a class=\"trait\" href=\"puffin/protocol/trait.ProtocolTypes.html\" title=\"trait puffin::protocol::ProtocolTypes\">ProtocolTypes</a>&gt; Mutator&lt;<a class=\"struct\" href=\"puffin/trace/struct.Trace.html\" title=\"struct puffin::trace::Trace\">Trace</a>&lt;PT&gt;, S&gt; for <a class=\"struct\" href=\"puffin/fuzzer/mutations/struct.ReplaceReuseMutator.html\" title=\"struct puffin::fuzzer::mutations::ReplaceReuseMutator\">ReplaceReuseMutator</a>&lt;S&gt;<div class=\"where\">where\n    S: HasRand,</div>"],["impl&lt;S, PT: <a class=\"trait\" href=\"puffin/protocol/trait.ProtocolTypes.html\" title=\"trait puffin::protocol::ProtocolTypes\">ProtocolTypes</a>&gt; Mutator&lt;<a class=\"struct\" href=\"puffin/trace/struct.Trace.html\" title=\"struct puffin::trace::Trace\">Trace</a>&lt;PT&gt;, S&gt; for <a class=\"struct\" href=\"puffin/fuzzer/mutations/struct.SkipMutator.html\" title=\"struct puffin::fuzzer::mutations::SkipMutator\">SkipMutator</a>&lt;S&gt;<div class=\"where\">where\n    S: HasRand,</div>"],["impl&lt;S, PT: <a class=\"trait\" href=\"puffin/protocol/trait.ProtocolTypes.html\" title=\"trait puffin::protocol::ProtocolTypes\">ProtocolTypes</a>&gt; Mutator&lt;<a class=\"struct\" href=\"puffin/trace/struct.Trace.html\" title=\"struct puffin::trace::Trace\">Trace</a>&lt;PT&gt;, S&gt; for <a class=\"struct\" href=\"puffin/fuzzer/mutations/struct.SwapMutator.html\" title=\"struct puffin::fuzzer::mutations::SwapMutator\">SwapMutator</a>&lt;S&gt;<div class=\"where\">where\n    S: HasRand,</div>"]]]]);
    if (window.register_implementors) {
        window.register_implementors(implementors);
    } else {
        window.pending_implementors = implementors;
    }
})()
//{"start":57,"fragment_lengths":[3989]}