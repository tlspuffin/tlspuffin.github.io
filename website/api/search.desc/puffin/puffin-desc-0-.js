searchState.loadedDescShard("puffin", 0, "<code>Agent</code>s represent communication participants like Alice, …\nThe <em>term</em> module defines typed<code>DYTerm</code>s of the form …\nThe fuzzer module setups the fuzzing loop. It also is …\nThis module adds plotting capabilities to<code>DYTerm</code>sand …\nThis macro defines the precomputation syntax to add …\nThe communication streams between <code>Agent</code>s.\nThis module define the execution <code>Trace</code>s.\nAn <code>Agent</code> holds a non-cloneable reference to a Stream.\n<code>AgentDescriptor</code>s act like a blueprint to spawn <code>Agent</code>s with …\nCopyable reference to an <code>Agent</code>. It identifies exactly one …\nContains the protocol specific configuration of an agent\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates wheter a agent is reusable, ie. it’s …\nChecks whether the agent is reusable with the descriptor.\nChecks whether the agent is in a good state.\nContains the protocol specific configuration of the Agent\nShut down the agent by consuming it and returning a string …\nDetermines whether two instances match. We can also ask it …\nThis module provides an enum for terms. A term can either …\nThis module provides traits for calling rust functions …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module provides a DLS for writing <code>Term</code>s within Rust. …\nThis module provides<code>DYTerm</code>sas well as iterators over them.\nA function symbol with fixed arity and fixed types.\nA variable symbol with fixed type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe struct which holds information about how to query this …\nID of this variable. This id stays the same during cloning.\nID of this function. This id stays the same during cloning.\nUnique ID of this variable. Uniqueness is guaranteed …\nUnique ID of this function. Uniqueness is guaranteed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA tree of evaluated term, linked to the term structure …\nPayload with the context related to the term it originates …\n<code>TermMetadata</code> stores some metadata about terms.\n<code>Term</code>s are <code>Term</code>s equipped with optional <code>Payloads</code> when they …\nConstants governing heuristic for finding payloads in term …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOperate the payloads replacements in <code>eval_tree.encode</code>[vec![…\nThis trait is implemented for function traits in order to:\nCloneable type for dynamic functions. This trait is …\nDescribes the shape of a <code>DynamicFunction</code>\nDescribes the attributes of a <code>DynamicFunction</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes <code>TypeId</code>s to be more readable\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the function symbol computes a strict sub-term …\nWhether the function symbol computes a list such as …\nWhether the function symbol computes “opaque” message …\nSymbols we will never MakeMessage on, thus disabling …\nWhether we usually fail and thus prevent from trying to …\nError which happens because of Codec needs to be used and …\nError which happened because a cryptographic operation …\nError which happens because the term is malformed (e.g. a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecords a universe of functions. Signatures are containers …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a <code>Signature</code> from the given <code>FunctionDefinition</code>s.\nCreate a new <code>Function</code> distinct from all existing <code>Function</code>s.\nAn <code>Function</code> applied to zero or more <code>Term</code>s (e.g. (<code>f(x, y)</code>, …\nA first-order term: either a <code>Variable</code> or an application of …\n<code>Term</code>s are <code>Term</code>s equipped with optional <code>Payloads</code> when they …\nTrait for data we can treat as terms (either <code>DYTerm</code> or …\nA concrete but unspecified <code>Term</code> (e.g. <code>x</code>, <code>y</code>). See <code>Variable</code> …\nAdd a payload at the root position, erase payloads in …\nAdd a payload at the root position and start with a new …\nReturn all payloads contains in a term, even under opaque …\nReturn all payloads contains in a term (mutable …\nIf <code>tree_mode</code> is true then each subgraph is self-contained …\nErase all payloads in a term, including those under opaque …\nEvaluate a term without replacing the payloads (returning …\nEvaluate terms into <code>ConcreteMessage</code> (considering Payloads)\nEvaluate terms into <code>ConcreteMessage</code> and <code>EvaluatedTerm</code> …\nEvaluate terms into bitstrings and <code>EvaluatedTerm</code> …\nWrap <code>evaluate_config</code> with error stats and logging handling\nEvaluate terms into <code>EvaluatedTerm</code>  considering all …\nEvaluate terms into <code>ConcreteMessage</code> considering all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn whether there is at least one payload, except those …\nReturn whether there is at least one payload, except those …\nHeight of term, considering non-symbolic terms as atoms\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen the term starts with an opaque function symbol (like …\nWhen the term starts with a list function symbol\nWhen the term starts with a <code>no_bit</code> function symbol. We …\nWhen the term starts with an opaque function symbol (like …\nMake and Add a payload at the root position, erase …\nReturn all payloads contained in a term, except those …\n<code>tlspuffin::term::op_impl::op_protocol_version</code> -&gt; …\nsize of a term, considering non-symbolic terms as atoms\nfinds the last claim matching <code>type</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThings we can encode and read from a Reader, <code>Sized</code> version.\nThings we can encode and read from a Reader. Used by …\nRead from a byte slice.\nTrait for data whose Vectors are encoded without length …\nEncode yourself by appending onto <code>bytes</code>.\nEncode yourself by appending onto <code>bytes</code>.\nencode a Vec whose length is encoded in 2 bytes\nencode a Vec whose length is encoded in 3 bytes\nencode a Vec whose length is encoded in 1 byte\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience function to get the results of <code>encode()</code>.\nConvenience function to get the results of <code>encode()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecode yourself by fiddling with the <code>Reader</code>. Return Some …\nDecode yourself by fiddling with the <code>Reader</code>. Return Some …\nRead one of these from the front of <code>bytes</code> and return it.\nRead one of these from the front of <code>bytes</code> and return it.\nSome error which was caused because of agents or their …\nError while encoding/reading EvaluatedTerm -&gt;/&lt;- bitstring\nReturned if a concrete function from the protocol fails or …\nThere was an unexpected IO error. Should never happen …\nPUT reported an error\nError while operating on a <code>Stream</code>\nError while evaluating a term\nError while evaluating a term due to a bug (for debugging)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStarts the fuzzing loop\nStats to display both cumulative and per-client stats\nGenerates a zoo of terms form a <code>Signature</code>. For each …\nCustom feedback for minimizing traces after execution and …\nAppend to the testcase the generated metadata in case of a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFirst [<code>Feedback</code>]\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many iterations each stage gets, as an upper bound It …\nSecond [<code>Feedback</code>]\nStarts the fuzzing loop\nGENERATE: Generates a previously-unseen term using a term …\nREMOVE AND LIFT: Removes a sub-term from a term and …\nREPEAT: Repeats an input which is already part of the trace\nREPLACE-MATCH: Replaces a function symbol with a different …\nREPLACE-REUSE: Replaces a sub-term with a different …\nSKIP:  Removes an input step\nSWAP: Swaps a sub-term with a different sub-term which is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBelow this term size we no longer mutate. Note that it is …\nHelpers for asan\nSetups the environment variable for ASAN, because …\nThe default mutational stage\nA <code>Mutator</code> that schedules one of the embedded mutations on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the number of iterations used to apply stacked …\nGets the number of iterations as a random number\nGet the mutations\nThe mutator, added to this stage\nThe list of mutators, added to this stage (as mutable ref)\nCreate a new <code>PuffinScheduledMutator</code> instance specifying …\nCreates a new default mutational stage\nGet the next mutation to apply\nAggregates error and execution statistics for a fuzzing …\nTracking stats during fuzzing and display both per-client …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSome log file unique id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetrics for evaluations and executions\nErrors counters triggered by all trace executions\nErrors counters triggered by term evaluations\nMetric for traces, terms, and payloads\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>EvaluatedTerm</code>: have both Codec and a way to extract …\nFill <code>knowledges</code> with new knowledge gathered form the type …\nA non-structured version of <code>ProtocolMessage</code>. This can be …\nStore a flight of opaque messages, a vec of all the …\nDefines the protocol which is being tested.\nA structured message. This type defines how all possible …\nDeframes a stream of bytes into distinct …\nStore a message flight, a vec of all the messages sent by …\nDefines the types used to manipulate and concretize Terms\nDowncast from <code>Box&lt;dyn Any&gt;</code> and encode as bitstring any …\nCreates a sane initial seed corpus.\nFill <code>knowledges</code> with new knowledge gathered form the type …\nGet the signature that is used in the protocol\nTry to read a bitstring and interpret it as the <code>TypeShape</code>, …\nGeneric trait used to define the interface with a concrete …\nReturns a textual representation of the state in which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the Put is in a good state\nProcess incoming buffer, internal progress, can fill in …\nIn-place reset of the state\nShut down the PUT by consuming it and returning a string …\nReturns a textual representation of the version of the PUT …\nFactory for instantiating programs-under-test.\nRegistry for Factories. An instance of this is usually …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDescribes in- or outbound channels of an …\nA <code>MemoryStream</code> has two <code>Channel</code>s. The Stream also …\nExecutes the given command directly.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQueues the given command for further execution.\nPerforms a set of actions within a synchronous update.\nTakes a single TLS message from the outbound channel\nThere are two action types <code>OutputAction</code> and <code>InputAction</code>.\nStore the result of a trace execution for displaying or …\nProvide inputs to the <code>Agent</code>.\nKnowledge describes an atomic piece of knowledge inferred …\nAdvance the <code>Agent</code>’s state and process the produced …\n<code>RawKnowledge</code> stores\nSource stores the origin of a knowledge, whether the agent …\nIdentify a step and a (prior) trace\nThe <code>TraceContext</code> represents the state of an execution.\nStore the result of a trace execution to be printed in the …\nThe number of steps that have been successfully executed\nNumber of steps executed before error\nReturns the variable which matches best -&gt; highest …\nReturns the variable which matches best -&gt; highest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe knowledge of the attacker\nCount the number of sub-messages of type <code>type_id</code> in the …\nCount the number of sub-messages of type <code>type_id</code> in the …\nCount the number of sub-messages of type <code>type_id</code> with the …\nTotal number of step in the trace\nSize of trace (summing all input sizes, counting one for …\nthe step of the trace that produced this knowledge\nThe step number in the trace\nExecution result of each step\nidentify the trace (allow to differentiate between prior …\nRemove the steps after (excluding) <code>after_step</code>")