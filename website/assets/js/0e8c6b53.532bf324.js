"use strict";(self.webpackChunktlspuffin_website=self.webpackChunktlspuffin_website||[]).push([[5469],{9780:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>a,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=i(4848),t=i(8453);const r={title:"Overview"},l=void 0,o={id:"developer/overview",title:"Overview",description:"Implementation",source:"@site/docs/developer/overview.md",sourceDirName:"developer",slug:"/developer/overview",permalink:"/docs/developer/overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Overview"},sidebar:"docs",previous:{title:"mk_vendor CLI",permalink:"/docs/references/mk_vendor"},next:{title:"Build Process",permalink:"/docs/developer/build"}},h={},c=[{value:"Implementation",id:"implementation",level:2},{value:"Fuzzing loop",id:"fuzzing-loop",level:3},{value:"Program Under Tests (PUTs)",id:"program-under-tests-puts",level:3},{value:"Benchmarks",id:"benchmarks",level:3},{value:"Setup",id:"setup",level:2},{value:"Testing my changes",id:"testing-my-changes",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.p,{children:"From an implementation perspective, several modules exist to make the fuzzer reusable."}),"\n",(0,s.jsx)(n.h3,{id:"fuzzing-loop",children:"Fuzzing loop"}),"\n",(0,s.jsx)(n.p,{children:"The main fuzzing loop is made of the following modules, each at a different layer (from high-level to low-level):"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tlspuffin/tlspuffin/tree/main/puffin",children:(0,s.jsx)(n.code,{children:"puffin"})}),": Core fuzzing engine which is protocol- and target-agnostic. It deals at a high level with the ",(0,s.jsx)(n.em,{children:"terms algebra"}),", the input ",(0,s.jsx)(n.em,{children:"traces"})," and the fuzzing process (scheduling, logging, mutations, ...). This module is built on top of the ",(0,s.jsx)(n.a,{href:"https://github.com/AFLplusplus/LibAFL",children:(0,s.jsx)(n.code,{children:"libAFL"})})," crate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tlspuffin/tlspuffin/tree/main/tlspuffin",children:(0,s.jsx)(n.code,{children:"tlspuffin"})}),": TLS fuzzer which instantiates ",(0,s.jsx)(n.code,{children:"puffin"})," to the TLS protocol and is PUTs-agnostic. It notably instantiates the traces to TLS traces with the TLS-specific terms and functions for the TLS terms algebra, based on the ",(0,s.jsx)(n.code,{children:"rustls"})," crate (e.g., ECSDA signatures, ECDHE encryption, ClientHello, etc.)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"harness"}),", for example for OpenSSL PUTs: ",(0,s.jsx)(n.a,{href:"https://github.com/tlspuffin/tlspuffin/tree/main/tlspuffin/harness/openssl",children:"harness/openssl"})," - Harnesses for some PUTs."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Finally, other protocols and PUTs can be fuzzed as well, by extending the fuzzer at layer 2. (new protocols) and 3. (new PUTs harnesses).. We did a preliminary version of those for SSH and OpenSSH in the module ",(0,s.jsxs)(n.a,{href:"https://github.com/tlspuffin/tlspuffin/tree/main/sshpuffin",children:[(0,s.jsx)(n.code,{children:"sshpuffin"})," (WIP)"]}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The following diagram shows the dependencies between the modules:"}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TD;\n    tlspuffin-- trait ProtocolBehavior --\x3epuffin;\n    sshpuffin-- trait ProtocolBehavior --\x3epuffin;\n\n    puffin--\x3eLibAFL;\n\n    puffin--\x3eputs;\n    puts-- trait Put --\x3ewolfSSL;\n    puts-- trait Put --\x3eOpenSSL;\n    puts--\x3e...;"}),"\n",(0,s.jsxs)(n.p,{children:["The interfaces between the modules are defined by the following Rust traits which define what a protocol is and what a PUT harness is:\n",(0,s.jsx)(n.a,{href:"https://tlspuffin.github.io/api/puffin/protocol/trait.ProtocolBehavior.html",children:(0,s.jsx)(n.code,{children:"ProtocolBehavior"})})," and ",(0,s.jsx)(n.a,{href:"https://tlspuffin.github.io/api/puffin/put/trait.Put.html",children:(0,s.jsx)(n.code,{children:"Put<PB: ProtocolBehavior>"})}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"program-under-tests-puts",children:"Program Under Tests (PUTs)"}),"\n",(0,s.jsxs)(n.p,{children:["The fuzzer then requires a ",(0,s.jsx)(n.em,{children:"target"})," (that is a harness linked to some PUT) to fuzz. To build the PUTs (vendor libraries) and link them to the fuzzer, the following tooling is used:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tlspuffin/tlspuffin/tree/main/puffin-build",children:(0,s.jsx)(n.code,{children:"puffin-build"})})," (generates the ",(0,s.jsx)(n.code,{children:"mk_vendor"})," tool): contains a crate implements the ",(0,s.jsx)(n.a,{href:"./build",children:"build process"}),", from creating ",(0,s.jsx)(n.em,{children:"PUTs"})," (",(0,s.jsx)(n.em,{children:"vendor libraries"}),") to linking PUTs into the fuzzer (through some fuzzing ",(0,s.jsx)(n.em,{children:"harness"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"benchmarks",children:"Benchmarks"}),"\n",(0,s.jsx)(n.p,{children:"To benchmark the fuzzer and perform regression tests, the following tooling is used:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tlspuffin/puffin-bench",children:"puffin-bench"}),": performance testbench for the ",(0,s.jsx)(n.code,{children:"puffin"})," fuzzer (external tooling; not part to the ",(0,s.jsx)(n.code,{children:"puffin"})," crate), see ",(0,s.jsx)(n.a,{href:"./benchmarks",children:"benchmarks"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(n.admonition,{title:"Ongoing Work",type:"warning",children:(0,s.jsx)(n.p,{children:"The rest of this page is currently under development. Information presented here might be incomplete or outdated."})}),"\n",(0,s.jsx)(n.p,{children:"Configure your environment for developement on the puffin project:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"nix"}),"\n",(0,s.jsxs)(n.li,{children:["editor setup","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"vscode (recommended extensions, change default features, ...)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing-my-changes",children:"Testing my changes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["justfile: use ",(0,s.jsx)(n.code,{children:"just fmt"})," for code formatting, ",(0,s.jsx)(n.code,{children:"just check"})," for basic checks, and ",(0,s.jsx)(n.code,{children:"just check-workspace"})," for more advanced checks. Under-the-hood, it uses:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"rustfmt"}),"\n",(0,s.jsx)(n.li,{children:"clang-format"}),"\n",(0,s.jsx)(n.li,{children:"cargo clippy"}),"\n",(0,s.jsx)(n.li,{children:"cargo bench"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["github PRs/github CI: use the PR's labels ",(0,s.jsx)(n.code,{children:"ci:none"}),", ",(0,s.jsx)(n.code,{children:"ci:fast"}),", ",(0,s.jsx)(n.code,{children:"ci:full"})," to fine-tune the CI checks. The full checks (",(0,s.jsx)(n.code,{children:"ci-full"}),") must be checked prior to merging PRs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/tlspuffin/puffin-bench",children:"puffin-bench"}),": run ",(0,s.jsx)(n.code,{children:"uv run benchmark"})," for end-to-end, long, and comprehensive regressions and performance checks, see ",(0,s.jsx)(n.a,{href:"./benchmarks",children:"benchmarks"}),"."]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);