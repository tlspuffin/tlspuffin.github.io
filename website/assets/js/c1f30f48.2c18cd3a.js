"use strict";(self.webpackChunktlspuffin_website=self.webpackChunktlspuffin_website||[]).push([[5740],{3823:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>a});var r=i(4848),s=i(8453);const l={title:"Build Process"},d=void 0,o={id:"developer/build",title:"Build Process",description:"This page is currently under development. Information presented here might be incomplete or outdated.",source:"@site/docs/developer/build.md",sourceDirName:"developer",slug:"/developer/build",permalink:"/docs/developer/build",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Build Process"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/developer/overview"},next:{title:"How To",permalink:"/docs/developer/howto"}},t={},a=[{value:"<code>puffin-build</code>",id:"puffin-build",level:2},{value:"Creating PUTs (vendor libraries)",id:"creating-puts-vendor-libraries",level:2},{value:"mk_vendor",id:"mk_vendor",level:3},{value:"Harnessing",id:"harnessing",level:2},{value:"Linking",id:"linking",level:2}];function c(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.admonition,{title:"Ongoing Work",type:"warning",children:(0,r.jsx)(n.p,{children:"This page is currently under development. Information presented here might be incomplete or outdated."})}),"\n",(0,r.jsx)(n.h2,{id:"puffin-build",children:(0,r.jsx)(n.code,{children:"puffin-build"})}),"\n",(0,r.jsxs)(n.p,{children:["The different steps of the build process are implemented in the Rust crate ",(0,r.jsx)(n.code,{children:"puffin-build"})," and summarize below:"]}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart LR;\n    subgraph libs ["creating PUTs (vendor libraries)"]\n        direction LR\n        mkv1[ ]:::hidden--\x3e|mk_vendor|L1\n        mkv2[ ]:::hidden--\x3e|mk_vendor|L2\n        L1["openssl340"]\n        i1:::hidden\n        L2["wolfssl530"]\n    end\n    \n    subgraph harnessing ["harnessing"]\n        direction LR\n        \n        P1["PUT openssl340"]\n        i2:::hidden\n        P2["PUT wolfssl530"]\n\n        ih1:::hidden\n        bundle["PUT bundle"]\n        ih2:::hidden\n\n        P1~~~ih1\n        P1--\x3ebundle\n        i2~~~bundle\n        P2~~~ih2\n        P2--\x3ebundle\n    end\n    \n    subgraph linking ["linking"]\n        direction LR\n        i3:::hidden\n        fuzzer["fuzzer"]\n        i4:::hidden\n    end\n    \n    i1 ~~~ i2\n    ih1 ~~~ i3\n    ih2 ~~~ i4\n    L1--\x3eP1\n    L2--\x3eP2\n    bundle--\x3efuzzer\n    \n    classDef hidden visibility: hidden;'}),"\n",(0,r.jsx)(n.h2,{id:"creating-puts-vendor-libraries",children:"Creating PUTs (vendor libraries)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"a vendor library is built from upstream sources (e.g. OpenSSL, BoringSSL, ...)"}),"\n",(0,r.jsxs)(n.li,{children:["stored in ",(0,r.jsx)(n.strong,{children:"VENDOR_DIR"})," (defaults to ",(0,r.jsx)(n.code,{children:"./vendor"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"mk_vendor"})," is a binary from the ",(0,r.jsx)(n.code,{children:"puffin-build"})," crate to build vendor libraries using ",(0,r.jsx)(n.strong,{children:"presets"})]}),"\n",(0,r.jsxs)(n.li,{children:["presets are located in ",(0,r.jsx)(n.code,{children:"puffin-build/vendor/<library>/presets.toml"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"mk_vendor",children:"mk_vendor"}),"\n",(0,r.jsxs)(n.p,{children:["The goal of ",(0,r.jsx)(n.code,{children:"mk_vendor"})," is to automate the creation of vendor libraries by providing a number of ",(0,r.jsx)(n.em,{children:"preset"})," configurations. Alongside the built library, it also dumps specific metadata that are used later by the harness."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, building OpenSSL 3.1.2 and wolfSSL 5.3.0 with ASAN can be simply done with the two presets ",(0,r.jsx)(n.code,{children:"openssl312"})," and ",(0,r.jsx)(n.code,{children:"wolfssl530-asan"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"./tools/mk_vendor make openssl:openssl312\n./tools/mk_vendor make wolfssl:wolfssl530-asan\n"})}),"\n",(0,r.jsxs)(n.admonition,{title:"wrapper script",type:"tip",children:[(0,r.jsxs)(n.p,{children:["To avoid complex calls to ",(0,r.jsx)(n.code,{children:"cargo"})," and for historical reasons, we provide a wrapper script to run ",(0,r.jsx)(n.code,{children:"mk_vendor"})," directly from the puffin repository toplevel:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"./tools/mk_vendor [ARGS]\n"})}),(0,r.jsx)(n.p,{children:"This is simply an advanced version of running:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"cargo run --bin mk_vendor -- [ARGS]\n"})})]}),"\n",(0,r.jsxs)(n.p,{children:["Vendor library presets are stored in ",(0,r.jsx)(n.code,{children:"puffin-build/vendors/<library>/presets.toml"}),". Each section in this file is a preset defining:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"the url/path to fetch the library sources."}),"\n",(0,r.jsx)(n.li,{children:"the script to build the library."}),"\n",(0,r.jsx)(n.li,{children:"the options for the build script."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For example, the section for the preset ",(0,r.jsx)(n.code,{children:"openssl340-asan"})," is in ",(0,r.jsx)(n.code,{children:"puffin-build/vendors/openssl/presets.toml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[openssl340-asan]\nsources = { repo = "https://github.com/tlspuffin/openssl", branch = "fuzz-OpenSSL_3_4", version = "3.4.0" }\nbuilder = { type = "builtin", name = "openssl" }\nasan = true\nsancov = true\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The exact format can be found by looking at the deserialized Rust struct ",(0,r.jsx)("a",{href:"/api/puffin_build/library/struct.Config.html",children:"puffin_build::library::Config"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"harnessing",children:"Harnessing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["the ",(0,r.jsx)(n.strong,{children:"harness"})," is responsible for creating a ",(0,r.jsx)(n.em,{children:"target"})," from a compatible PUT (vendor library), and expose a common interface to the fuzzer"]}),"\n",(0,r.jsx)(n.li,{children:"protocol specific"}),"\n",(0,r.jsx)(n.li,{children:"library specific (for example one harness for all OpenSSL and LibreSSL versions, which share a common API, hence a common harnessing)"}),"\n",(0,r.jsxs)(n.li,{children:["stored in ",(0,r.jsx)(n.code,{children:"<protocol>/harness/<library>"})," (e.g. ",(0,r.jsx)(n.code,{children:"tlspuffin/harness/openssl"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["creates a ",(0,r.jsx)(n.strong,{children:"PUT"}),", an interface around the vendor library intended for the fuzzer to perform operations in a generic way (agent creation, inter-agent communication, ...)"]}),"\n",(0,r.jsxs)(n.li,{children:["several PUTs are then bundled together for linking with the fuzzer. The bundle consists in:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"a static library containing all the PUT object files and can be linked with the final Rust fuzzer binary"}),"\n",(0,r.jsxs)(n.li,{children:["a Rust bindings file which contains the necessary code for ",(0,r.jsx)(n.em,{children:"registration"})," of the the linked PUTs into the final binary"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"linking",children:"Linking"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["use cargo build script to dump necessary metadata through ",(0,r.jsx)(n.code,{children:"bundle.print_cargo_metadata()"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["defines environment variable ",(0,r.jsx)(n.code,{children:"RUST_PUTS_BUNDLE_FILE"})," pointing to the Rust bindings file"]}),"\n",(0,r.jsx)(n.li,{children:"setup link paths for Rust to link with the bundle library"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.code,{children:"tlspuffin/build.rs"})," for a full example of how the ",(0,r.jsx)(n.code,{children:"puffin-build"})," crate is used to harness and bundle the vendor libraries in VENDOR_DIR and produce the necessary cargo metadata."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);