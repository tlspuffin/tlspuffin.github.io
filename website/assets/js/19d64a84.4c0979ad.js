"use strict";(self.webpackChunktlspuffin_website=self.webpackChunktlspuffin_website||[]).push([[4174],{683:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=s(4848),i=s(8453);const r={title:"Replaying Traces"},a=void 0,l={id:"guides/getting-started/replaying-traces",title:"Replaying Traces",description:"tlspuffin creates fuzzing inputs using high-level protocol abstractions.",source:"@site/docs/guides/getting-started/replaying-traces.md",sourceDirName:"guides/getting-started",slug:"/guides/getting-started/replaying-traces",permalink:"/docs/guides/getting-started/replaying-traces",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Replaying Traces"},sidebar:"docs",previous:{title:"Fuzzing OpenSSL",permalink:"/docs/guides/getting-started/fuzzing-openssl"},next:{title:"Support Matrix",permalink:"/docs/references/support-matrix"}},c={},d=[{value:"Executing a Trace",id:"executing-a-trace",level:2},{value:"Replaying Against a Target in the Wild",id:"replaying-against-a-target-in-the-wild",level:2}];function o(e){const t={admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.em,{children:"tlspuffin"})," creates fuzzing inputs using high-level protocol abstractions.\nSuch an input is a ",(0,n.jsx)(t.em,{children:"trace"})," of the messages sent to the different ",(0,n.jsx)(t.em,{children:"agents"}),".\nUnlike standard fuzzers that can simply submit the generated inputs to the program under tests, executing a trace is a more involved process, including:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"spawning the network agents involved in the trace"}),"\n",(0,n.jsx)(t.li,{children:"building protocol messages"}),"\n",(0,n.jsx)(t.li,{children:"transferring messages to agents"}),"\n",(0,n.jsx)(t.li,{children:"reading and parsing the outputs generated by the agents"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Therefore, ",(0,n.jsx)(t.em,{children:"tlspuffin"})," provides the ability to store all these steps in a ",(0,n.jsx)(t.code,{children:".trace"})," file and execute them on demand."]}),"\n",(0,n.jsx)(t.h2,{id:"executing-a-trace",children:"Executing a Trace"}),"\n",(0,n.jsxs)(t.p,{children:["Through the ",(0,n.jsx)(t.em,{children:"tlspuffin"})," CLI, the ",(0,n.jsx)(t.code,{children:"execute"})," command provides a simple way to execute a trace:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sh",children:"./target/release/tlspuffin execute 'seeds/tlspuffin::tls::seeds::seed_successful.trace'\n"})}),"\n",(0,n.jsxs)(t.p,{children:["One can choose which fuzz target to execute by specifying the ",(0,n.jsx)(t.code,{children:"--put"})," option, for example: ",(0,n.jsx)(t.code,{children:"./target/release/tlspuffin --put openssl312-asan execute <path_trace>'"}),"."]}),"\n",(0,n.jsx)(t.admonition,{title:"Trace Validity",type:"note",children:(0,n.jsxs)(t.p,{children:["Not all traces are ",(0,n.jsx)(t.em,{children:"valid"})," traces in the sense of the protocol under test.\nIn particular, while fuzzing it is likely to generate invalid traces due to malformed or out-of-order messages.\nWhen trying to execute an invalid trace, the ",(0,n.jsx)(t.code,{children:"execute"})," command will signal whether the execution finished successfully and provide hints about the error encountered in case of failure."]})}),"\n",(0,n.jsx)(t.h2,{id:"replaying-against-a-target-in-the-wild",children:"Replaying Against a Target in the Wild"}),"\n",(0,n.jsxs)(t.p,{children:["While it is useful to let ",(0,n.jsx)(t.em,{children:"tlspuffin"})," spawn the agents (clients, servers) involved in a trace, the communication between these agents is made through a harness interface wrapping the library under test.\nUsing the CLI ",(0,n.jsx)(t.code,{children:"tcp"})," command, it is also possible to replace the first agent of a trace (e.g., a server) with a real, running server connected through TCP."]}),"\n",(0,n.jsx)(t.p,{children:"For example, one could start an OpenSSL server on port 44410:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sh",children:"openssl s_server -key tlspuffin/assets/alice-key.pem -cert tlspuffin/assets/alice.pem -accept 44410\n"})}),"\n",(0,n.jsx)(t.p,{children:"And replay one of the seed traces against this server:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sh",children:"./target/release/tlspuffin tcp --port 44410 'seeds/tlspuffin::tls::seeds::seed_client_attacker_full.trace'\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}}}]);