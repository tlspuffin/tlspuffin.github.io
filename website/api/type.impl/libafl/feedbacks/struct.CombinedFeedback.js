(function() {
    var type_impls = Object.fromEntries([["puffin",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CombinedFeedback%3CA,+B,+FL,+S%3E\" class=\"impl\"><a href=\"#impl-CombinedFeedback%3CA,+B,+FL,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, FL, S&gt; CombinedFeedback&lt;A, B, FL, S&gt;<div class=\"where\">where\n    A: Feedback&lt;S&gt;,\n    B: Feedback&lt;S&gt;,\n    FL: FeedbackLogic&lt;A, B, S&gt;,\n    S: State,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(first: A, second: B) -&gt; CombinedFeedback&lt;A, B, FL, S&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new combined feedback</p>\n</div></details></div></details>",0,"puffin::fuzzer::libafl_setup::ConcreteFeedback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-CombinedFeedback%3CA,+B,+FL,+S%3E\" class=\"impl\"><a href=\"#impl-Debug-for-CombinedFeedback%3CA,+B,+FL,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, FL, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for CombinedFeedback&lt;A, B, FL, S&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + Feedback&lt;S&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + Feedback&lt;S&gt;,\n    FL: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + FeedbackLogic&lt;A, B, S&gt;,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + State,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","puffin::fuzzer::libafl_setup::ConcreteFeedback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Feedback%3CS%3E-for-CombinedFeedback%3CA,+B,+FL,+S%3E\" class=\"impl\"><a href=\"#impl-Feedback%3CS%3E-for-CombinedFeedback%3CA,+B,+FL,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, FL, S&gt; Feedback&lt;S&gt; for CombinedFeedback&lt;A, B, FL, S&gt;<div class=\"where\">where\n    A: Feedback&lt;S&gt;,\n    B: Feedback&lt;S&gt;,\n    FL: FeedbackLogic&lt;A, B, S&gt;,\n    S: State,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.init_state\" class=\"method trait-impl\"><a href=\"#method.init_state\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">init_state</a>(&amp;mut self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Initializes the feedback state.\nThis method is called after that the <code>State</code> is created.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_interesting\" class=\"method trait-impl\"><a href=\"#method.is_interesting\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_interesting</a>&lt;EM, OT&gt;(\n    &amp;mut self,\n    state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>,\n    manager: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut EM</a>,\n    input: &amp;&lt;S as UsesInput&gt;::Input,\n    observers: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;OT</a>,\n    exit_kind: &amp;ExitKind,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, Error&gt;<div class=\"where\">where\n    EM: EventFirer&lt;State = S&gt;,\n    OT: ObserversTuple&lt;S&gt;,</div></h4></section></summary><div class='docblock'><code>is_interesting </code> return if an input is worth the addition to the corpus</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_interesting_introspection\" class=\"method trait-impl\"><a href=\"#method.is_interesting_introspection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_interesting_introspection</a>&lt;EM, OT&gt;(\n    &amp;mut self,\n    state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>,\n    manager: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut EM</a>,\n    input: &amp;&lt;S as UsesInput&gt;::Input,\n    observers: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;OT</a>,\n    exit_kind: &amp;ExitKind,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, Error&gt;<div class=\"where\">where\n    EM: EventFirer&lt;State = S&gt;,\n    OT: ObserversTuple&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Returns if the result of a run is interesting and the value input should be stored in a corpus.\nIt also keeps track of introspection stats.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append_metadata\" class=\"method trait-impl\"><a href=\"#method.append_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">append_metadata</a>&lt;OT&gt;(\n    &amp;mut self,\n    state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>,\n    observers: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;OT</a>,\n    testcase: &amp;mut Testcase&lt;&lt;S as UsesInput&gt;::Input&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    OT: ObserversTuple&lt;S&gt;,</div></h4></section></summary><div class='docblock'>Append to the testcase the generated metadata in case of a new corpus item</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.discard_metadata\" class=\"method trait-impl\"><a href=\"#method.discard_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">discard_metadata</a>(\n    &amp;mut self,\n    state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut S</a>,\n    input: &amp;&lt;S as UsesInput&gt;::Input,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Discard the stored metadata in case that the testcase is not added to the corpus</div></details></div></details>","Feedback<S>","puffin::fuzzer::libafl_setup::ConcreteFeedback"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Named-for-CombinedFeedback%3CA,+B,+FL,+S%3E\" class=\"impl\"><a href=\"#impl-Named-for-CombinedFeedback%3CA,+B,+FL,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, FL, S&gt; Named for CombinedFeedback&lt;A, B, FL, S&gt;<div class=\"where\">where\n    A: Feedback&lt;S&gt;,\n    B: Feedback&lt;S&gt;,\n    FL: FeedbackLogic&lt;A, B, S&gt;,\n    S: State,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method trait-impl\"><a href=\"#method.name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">name</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Provide the name of this element.</div></details></div></details>","Named","puffin::fuzzer::libafl_setup::ConcreteFeedback"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[10076]}