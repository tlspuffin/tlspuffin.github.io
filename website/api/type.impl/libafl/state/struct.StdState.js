(function() {
    var type_impls = Object.fromEntries([["puffin",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-Clone-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    SC: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; StdState&lt;I, C, R, SC&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-Debug-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    SC: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-Deserialize%3C'de%3E-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, I, C, R, SC&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt;,\n    SC: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt;,\n    R: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(\n    __deserializer: __D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;StdState&lt;I, C, R, SC&gt;, &lt;__D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasClientPerfMonitor-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasClientPerfMonitor-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasClientPerfMonitor for StdState&lt;I, C, R, SC&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.introspection_monitor\" class=\"method trait-impl\"><a href=\"#method.introspection_monitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">introspection_monitor</a>(&amp;self) -&gt; &amp;ClientPerfMonitor</h4></section></summary><div class='docblock'>[<code>ClientPerfMonitor</code>] itself</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.introspection_monitor_mut\" class=\"method trait-impl\"><a href=\"#method.introspection_monitor_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">introspection_monitor_mut</a>(&amp;mut self) -&gt; &amp;mut ClientPerfMonitor</h4></section></summary><div class='docblock'>Mutatable ref to [<code>ClientPerfMonitor</code>]</div></details></div></details>","HasClientPerfMonitor","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasCorpus-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasCorpus-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasCorpus for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    I: Input,\n    C: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,\n    R: Rand,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.corpus\" class=\"method trait-impl\"><a href=\"#method.corpus\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">corpus</a>(&amp;self) -&gt; &amp;&lt;StdState&lt;I, C, R, SC&gt; as HasCorpus&gt;::Corpus</h4></section></summary><div class=\"docblock\"><p>Returns the corpus</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.corpus_mut\" class=\"method trait-impl\"><a href=\"#method.corpus_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">corpus_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;StdState&lt;I, C, R, SC&gt; as HasCorpus&gt;::Corpus</h4></section></summary><div class=\"docblock\"><p>Returns the mutable corpus</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Corpus\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Corpus\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Corpus</a> = C</h4></section></summary><div class='docblock'>The associated type implementing [<code>Corpus</code>].</div></details></div></details>","HasCorpus","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasExecutions-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasExecutions-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasExecutions for StdState&lt;I, C, R, SC&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.executions\" class=\"method trait-impl\"><a href=\"#method.executions\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">executions</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The executions counter</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.executions_mut\" class=\"method trait-impl\"><a href=\"#method.executions_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">executions_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The executions counter (mutable)</p>\n</div></details></div></details>","HasExecutions","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasImported-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasImported-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasImported for StdState&lt;I, C, R, SC&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.imported\" class=\"method trait-impl\"><a href=\"#method.imported\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">imported</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of new paths that imported from other fuzzers</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.imported_mut\" class=\"method trait-impl\"><a href=\"#method.imported_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">imported_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of new paths that imported from other fuzzers</p>\n</div></details></div></details>","HasImported","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasLastReportTime-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasLastReportTime-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasLastReportTime for StdState&lt;I, C, R, SC&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_report_time\" class=\"method trait-impl\"><a href=\"#method.last_report_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">last_report_time</a>(&amp;self) -&gt; &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The last time we reported progress,if available/used.\nThis information is used by fuzzer <code>maybe_report_progress</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_report_time_mut\" class=\"method trait-impl\"><a href=\"#method.last_report_time_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">last_report_time_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The last time we reported progress,if available/used (mutable).\nThis information is used by fuzzer <code>maybe_report_progress</code>.</p>\n</div></details></div></details>","HasLastReportTime","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasMaxSize-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasMaxSize-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasMaxSize for StdState&lt;I, C, R, SC&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_size\" class=\"method trait-impl\"><a href=\"#method.max_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>The maximum size hint for items and mutations returned</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_max_size\" class=\"method trait-impl\"><a href=\"#method.set_max_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">set_max_size</a>(&amp;mut self, max_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Sets the maximum size hint for the items and mutations</div></details></div></details>","HasMaxSize","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasMetadata-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasMetadata-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasMetadata for StdState&lt;I, C, R, SC&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata_map\" class=\"method trait-impl\"><a href=\"#method.metadata_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata_map</a>(&amp;self) -&gt; &amp;SerdeAnyMap</h4></section></summary><div class=\"docblock\"><p>Get all the metadata into an [<code>hashbrown::HashMap</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata_map_mut\" class=\"method trait-impl\"><a href=\"#method.metadata_map_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata_map_mut</a>(&amp;mut self) -&gt; &amp;mut SerdeAnyMap</h4></section></summary><div class=\"docblock\"><p>Get all the metadata into an [<code>hashbrown::HashMap</code>] (mutable)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_metadata\" class=\"method trait-impl\"><a href=\"#method.add_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">add_metadata</a>&lt;M&gt;(&amp;mut self, meta: M)<div class=\"where\">where\n    M: SerdeAny,</div></h4></section></summary><div class='docblock'>Add a metadata to the metadata map</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_metadata\" class=\"method trait-impl\"><a href=\"#method.has_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">has_metadata</a>&lt;M&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    M: SerdeAny,</div></h4></section></summary><div class='docblock'>Check for a metadata</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method trait-impl\"><a href=\"#method.metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata</a>&lt;M&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;M</a>, Error&gt;<div class=\"where\">where\n    M: SerdeAny,</div></h4></section></summary><div class='docblock'>To get metadata</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata_mut\" class=\"method trait-impl\"><a href=\"#method.metadata_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">metadata_mut</a>&lt;M&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut M</a>, Error&gt;<div class=\"where\">where\n    M: SerdeAny,</div></h4></section></summary><div class='docblock'>To get mutable metadata</div></details></div></details>","HasMetadata","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasNamedMetadata-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasNamedMetadata-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasNamedMetadata for StdState&lt;I, C, R, SC&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.named_metadata_map\" class=\"method trait-impl\"><a href=\"#method.named_metadata_map\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">named_metadata_map</a>(&amp;self) -&gt; &amp;NamedSerdeAnyMap</h4></section></summary><div class=\"docblock\"><p>Get all the metadata into an [<code>hashbrown::HashMap</code>]</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.named_metadata_map_mut\" class=\"method trait-impl\"><a href=\"#method.named_metadata_map_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">named_metadata_map_mut</a>(&amp;mut self) -&gt; &amp;mut NamedSerdeAnyMap</h4></section></summary><div class=\"docblock\"><p>Get all the metadata into an [<code>hashbrown::HashMap</code>] (mutable)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_named_metadata\" class=\"method trait-impl\"><a href=\"#method.add_named_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">add_named_metadata</a>&lt;M&gt;(&amp;mut self, meta: M, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>)<div class=\"where\">where\n    M: SerdeAny,</div></h4></section></summary><div class='docblock'>Add a metadata to the metadata map</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.has_named_metadata\" class=\"method trait-impl\"><a href=\"#method.has_named_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">has_named_metadata</a>&lt;M&gt;(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    M: SerdeAny,</div></h4></section></summary><div class='docblock'>Check for a metadata</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.named_metadata\" class=\"method trait-impl\"><a href=\"#method.named_metadata\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">named_metadata</a>&lt;M&gt;(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;M</a>, Error&gt;<div class=\"where\">where\n    M: SerdeAny,</div></h4></section></summary><div class='docblock'>To get named metadata</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.named_metadata_mut\" class=\"method trait-impl\"><a href=\"#method.named_metadata_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">named_metadata_mut</a>&lt;M&gt;(&amp;mut self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut M</a>, Error&gt;<div class=\"where\">where\n    M: SerdeAny,</div></h4></section></summary><div class='docblock'>To get mutable named metadata</div></details></div></details>","HasNamedMetadata","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasRand-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasRand-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasRand for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    R: Rand,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rand\" class=\"method trait-impl\"><a href=\"#method.rand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rand</a>(&amp;self) -&gt; &amp;&lt;StdState&lt;I, C, R, SC&gt; as HasRand&gt;::Rand</h4></section></summary><div class=\"docblock\"><p>The rand instance</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rand_mut\" class=\"method trait-impl\"><a href=\"#method.rand_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rand_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;StdState&lt;I, C, R, SC&gt; as HasRand&gt;::Rand</h4></section></summary><div class=\"docblock\"><p>The rand instance (mutable)</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Rand\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Rand\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Rand</a> = R</h4></section></summary><div class='docblock'>The associated type implementing [<code>Rand</code>]</div></details></div></details>","HasRand","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasSolutions-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasSolutions-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasSolutions for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    I: Input,\n    SC: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.solutions\" class=\"method trait-impl\"><a href=\"#method.solutions\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">solutions</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;SC</a></h4></section></summary><div class=\"docblock\"><p>Returns the solutions corpus</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.solutions_mut\" class=\"method trait-impl\"><a href=\"#method.solutions_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">solutions_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut SC</a></h4></section></summary><div class=\"docblock\"><p>Returns the solutions corpus (mutable)</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Solutions\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Solutions\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Solutions</a> = SC</h4></section></summary><div class='docblock'>The associated type implementing [<code>Corpus</code>] for solutions</div></details></div></details>","HasSolutions","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasStartTime-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasStartTime-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasStartTime for StdState&lt;I, C, R, SC&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_time\" class=\"method trait-impl\"><a href=\"#method.start_time\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_time</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>The starting time</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_time_mut\" class=\"method trait-impl\"><a href=\"#method.start_time_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">start_time_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>The starting time (mutable)</p>\n</div></details></div></details>","HasStartTime","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasTestcase-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-HasTestcase-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; HasTestcase for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    I: Input,\n    C: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,\n    R: Rand,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.testcase\" class=\"method trait-impl\"><a href=\"#method.testcase\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">testcase</a>(\n    &amp;self,\n    id: CorpusId,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, Testcase&lt;&lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>To get the testcase</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.testcase_mut\" class=\"method trait-impl\"><a href=\"#method.testcase_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">testcase_mut</a>(\n    &amp;self,\n    id: CorpusId,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, Testcase&lt;&lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>To get mutable testcase</p>\n</div></details></div></details>","HasTestcase","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-Serialize-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt;,\n    SC: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt;,\n    R: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + for&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(\n    &amp;self,\n    __serializer: __S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;__S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.160/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, I, R, SC&gt; StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    I: Input,\n    C: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,\n    R: Rand,\n    SC: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_initial_inputs_forced\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">generate_initial_inputs_forced</a>&lt;G, E, EM, Z&gt;(\n    &amp;mut self,\n    fuzzer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Z</a>,\n    executor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut E</a>,\n    generator: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut G</a>,\n    manager: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut EM</a>,\n    num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    E: UsesState&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    EM: EventFirer&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    G: Generator&lt;&lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input, StdState&lt;I, C, R, SC&gt;&gt;,\n    Z: Evaluator&lt;E, EM, State = StdState&lt;I, C, R, SC&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Generate <code>num</code> initial inputs, using the passed-in generator and force the addition to corpus.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_initial_inputs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">generate_initial_inputs</a>&lt;G, E, EM, Z&gt;(\n    &amp;mut self,\n    fuzzer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Z</a>,\n    executor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut E</a>,\n    generator: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut G</a>,\n    manager: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut EM</a>,\n    num: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    E: UsesState&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    EM: EventFirer&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    G: Generator&lt;&lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input, StdState&lt;I, C, R, SC&gt;&gt;,\n    Z: Evaluator&lt;E, EM, State = StdState&lt;I, C, R, SC&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Generate <code>num</code> initial inputs, using the passed-in generator.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>&lt;F, O&gt;(\n    rand: R,\n    corpus: C,\n    solutions: SC,\n    feedback: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    objective: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut O</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;StdState&lt;I, C, R, SC&gt;, Error&gt;<div class=\"where\">where\n    F: Feedback&lt;StdState&lt;I, C, R, SC&gt;&gt;,\n    O: Feedback&lt;StdState&lt;I, C, R, SC&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>State</code>, taking ownership of all of the individual components during fuzzing.</p>\n</div></details></div></details>",0,"puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;C, I, R, SC&gt; StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    I: Input,\n    C: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,\n    R: Rand,\n    SC: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.must_load_initial_inputs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">must_load_initial_inputs</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Decide if the state nust load the inputs</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_initial_inputs_by_filenames\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">load_initial_inputs_by_filenames</a>&lt;E, EM, Z&gt;(\n    &amp;mut self,\n    fuzzer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Z</a>,\n    executor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut E</a>,\n    manager: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut EM</a>,\n    file_list: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    E: UsesState&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    EM: EventFirer&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    Z: Evaluator&lt;E, EM, State = StdState&lt;I, C, R, SC&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Loads all intial inputs, even if they are not considered <code>interesting</code>.\nThis is rarely the right method, use <code>load_initial_inputs</code>,\nand potentially fix your <code>Feedback</code>, instead.\nThis method takes a list of files, instead of folders.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_initial_inputs_forced\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">load_initial_inputs_forced</a>&lt;E, EM, Z&gt;(\n    &amp;mut self,\n    fuzzer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Z</a>,\n    executor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut E</a>,\n    manager: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut EM</a>,\n    in_dirs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    E: UsesState&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    EM: EventFirer&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    Z: Evaluator&lt;E, EM, State = StdState&lt;I, C, R, SC&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Loads all intial inputs, even if they are not considered <code>interesting</code>.\nThis is rarely the right method, use <code>load_initial_inputs</code>,\nand potentially fix your <code>Feedback</code>, instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_initial_inputs_by_filenames_forced\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">load_initial_inputs_by_filenames_forced</a>&lt;E, EM, Z&gt;(\n    &amp;mut self,\n    fuzzer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Z</a>,\n    executor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut E</a>,\n    manager: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut EM</a>,\n    file_list: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    E: UsesState&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    EM: EventFirer&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    Z: Evaluator&lt;E, EM, State = StdState&lt;I, C, R, SC&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Loads initial inputs from the passed-in <code>in_dirs</code>.\nIf <code>forced</code> is true, will add all testcases, no matter what.\nThis method takes a list of files, instead of folders.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_initial_inputs\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">load_initial_inputs</a>&lt;E, EM, Z&gt;(\n    &amp;mut self,\n    fuzzer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Z</a>,\n    executor: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut E</a>,\n    manager: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut EM</a>,\n    in_dirs: &amp;[<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    E: UsesState&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    EM: EventFirer&lt;State = StdState&lt;I, C, R, SC&gt;&gt;,\n    Z: Evaluator&lt;E, EM, State = StdState&lt;I, C, R, SC&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Loads initial inputs from the passed-in <code>in_dirs</code>.</p>\n</div></details></div></details>",0,"puffin::fuzzer::libafl_setup::ConcreteState"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UsesInput-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-UsesInput-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; UsesInput for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    I: Input,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Input\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Input\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Input</a> = I</h4></section></summary><div class='docblock'>Type which will be used throughout this state.</div></details></div></details>","UsesInput","puffin::fuzzer::libafl_setup::ConcreteState"],["<section id=\"impl-State-for-StdState%3CI,+C,+R,+SC%3E\" class=\"impl\"><a href=\"#impl-State-for-StdState%3CI,+C,+R,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, C, R, SC&gt; State for StdState&lt;I, C, R, SC&gt;<div class=\"where\">where\n    C: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,\n    R: Rand,\n    SC: Corpus&lt;Input = &lt;StdState&lt;I, C, R, SC&gt; as UsesInput&gt;::Input&gt;,\n    StdState&lt;I, C, R, SC&gt;: UsesInput,</div></h3></section>","State","puffin::fuzzer::libafl_setup::ConcreteState"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[48045]}